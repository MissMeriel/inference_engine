
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Jun 05 15:49:03 EDT 2019
//----------------------------------------------------

package mjparser;

import java_cup.runtime.*;
import java.io.FileInputStream;
import java.util.function.Predicate;
import java.util.*;
import java.io.PrintWriter;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.File;
import java.io.FileNotFoundException;
import inference_engine.RawType;
import inference_engine.Global;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Jun 05 15:49:03 EDT 2019
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\027\000\002\002\006\000\002\002\004\000\002\003" +
    "\004\000\002\003\002\000\002\004\005\000\002\004\007" +
    "\000\002\004\007\000\002\004\007\000\002\004\011\000" +
    "\002\004\011\000\002\005\005\000\002\005\003\000\002" +
    "\006\003\000\002\010\005\000\002\010\005\000\002\010" +
    "\005\000\002\010\005\000\002\010\005\000\002\011\005" +
    "\000\002\012\005\000\002\013\003\000\002\014\003\000" +
    "\002\007\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\053\000\004\004\005\001\002\000\004\002\055\001" +
    "\002\000\006\005\ufffe\007\ufffe\001\002\000\006\005\007" +
    "\007\012\001\002\000\006\002\ufffe\007\ufffe\001\002\000" +
    "\010\002\uffff\005\uffff\007\uffff\001\002\000\004\024\013" +
    "\001\002\000\016\015\uffec\017\uffec\020\uffec\021\uffec\022" +
    "\uffec\024\uffec\001\002\000\004\006\015\001\002\000\012" +
    "\002\ufffd\005\ufffd\007\ufffd\024\016\001\002\000\012\002" +
    "\uffeb\005\uffeb\007\uffeb\024\uffeb\001\002\000\010\007\012" +
    "\011\025\012\023\001\002\000\012\002\ufffc\005\ufffc\007" +
    "\ufffc\024\031\001\002\000\012\002\ufff6\005\ufff6\007\ufff6" +
    "\024\ufff6\001\002\000\012\002\ufff5\005\ufff5\007\ufff5\024" +
    "\ufff5\001\002\000\014\015\042\017\043\020\046\021\044" +
    "\022\045\001\002\000\004\013\040\001\002\000\012\002" +
    "\ufffb\005\ufffb\007\ufffb\024\036\001\002\000\004\013\033" +
    "\001\002\000\012\002\ufffa\005\ufffa\007\ufffa\024\027\001" +
    "\002\000\004\007\012\001\002\000\012\002\ufff8\005\ufff8" +
    "\007\ufff8\024\031\001\002\000\004\007\012\001\002\000" +
    "\012\002\ufff7\005\ufff7\007\ufff7\024\ufff7\001\002\000\004" +
    "\014\035\001\002\000\012\002\uffef\005\uffef\007\uffef\024" +
    "\uffef\001\002\000\012\002\uffed\005\uffed\007\uffed\024\uffed" +
    "\001\002\000\004\012\023\001\002\000\010\002\ufff9\005" +
    "\ufff9\007\ufff9\001\002\000\004\014\035\001\002\000\012" +
    "\002\uffee\005\uffee\007\uffee\024\uffee\001\002\000\004\014" +
    "\053\001\002\000\004\014\035\001\002\000\004\014\035" +
    "\001\002\000\004\014\035\001\002\000\004\014\035\001" +
    "\002\000\012\002\ufff3\005\ufff3\007\ufff3\024\ufff3\001\002" +
    "\000\012\002\ufff1\005\ufff1\007\ufff1\024\ufff1\001\002\000" +
    "\012\002\ufff2\005\ufff2\007\ufff2\024\ufff2\001\002\000\012" +
    "\002\ufff4\005\ufff4\007\ufff4\024\ufff4\001\002\000\012\002" +
    "\ufff0\005\ufff0\007\ufff0\024\ufff0\001\002\000\006\002\001" +
    "\007\012\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\053\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\003\005\001\001\000\006\004\007\014\010\001\001" +
    "\000\004\003\053\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\013\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\005\016\006\017\010" +
    "\020\011\023\012\025\014\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\005\027\006\017\010\020\014\021\001" +
    "\001\000\002\001\001\000\010\006\031\010\020\014\021" +
    "\001\001\000\002\001\001\000\004\013\033\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\036\001\001" +
    "\000\002\001\001\000\004\013\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\051\001\001\000\004" +
    "\013\050\001\001\000\004\013\047\001\001\000\004\013" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\004" +
    "\007\014\010\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static void main(String args[]) throws Exception {
        new parser(new Yylex(new FileInputStream(args[0]))).parse();
    }
				
				public PrintWriter out; 
    
					public String programName;
	
					public void unrecovered_syntax_error(Symbol cur_SymbolValue) {
									//System.out.println("cur_SymbolValue: "+ cur_SymbolValue.value);
									report_fatal_error("Fatal syntax error", cur_SymbolValue);
					}
					
					public void report_fatal_error(String message, Object info) {
									report_error(message, info);
									done_parsing();
									Symbol sym = (Symbol)info;
									mjparser.SymbolValue tok = (mjparser.SymbolValue)sym.value;
									throw new mjparser.ParseException("Fatal parsing error", tok.line, tok.pos);
					}
					
					public void report_error(String message, Object info) {
									Symbol sym = (Symbol)info;
									mjparser.SymbolValue tok = (mjparser.SymbolValue)sym.value;
									System.out.println("sym null? "+(sym == null));
									System.out.println("sym.sym: "+sym.sym);
									System.err.println("tok null? "+ (tok == null));
									System.err.println("tok.lexeme: "+ tok.lexeme);
									System.err.println("[" + tok.line + "," + tok.pos + "] "); 
									System.err.println( message + " at " + tok.toString() );
					}
					

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // rawtype ::= RAWTYPE 
            {
              SymbolValue RESULT =null;
		int rtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SymbolValue rt = (SymbolValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*System.out.println("RawType "+RawType.valueOf(rt.toString()));*/ RESULT = rt; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rawtype",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // variable ::= VARIABLE 
            {
              SymbolValue RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SymbolValue v = (SymbolValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*System.out.println(v.lexeme);*/ RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // int ::= NUMBER 
            {
              SymbolValue RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SymbolValue n = (SymbolValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*System.out.println("int "+n.lexeme);*/ RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("int",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // delta_stmt ::= DELTA DEF int 
            {
              SymbolValue RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SymbolValue i = (SymbolValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("delta_stmt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // threshold_stmt ::= THRESHOLD DEF int 
            {
              SymbolValue RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SymbolValue i = (SymbolValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("threshold_stmt",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // exp ::= variable EQ NUMBER 
            {
              Bound RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SymbolValue a = (SymbolValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SymbolValue n = (SymbolValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						String id = a.toString() + op.lexeme + n.lexeme;
						System.out.println(id);
						Predicate<Double> tester = (Predicate<Double>) (Double d) -> {return Math.abs(d-Double.valueOf(n.lexeme))<1;};
						Bound bound = new Bound(id, tester);
						RESULT = bound;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // exp ::= variable GTEQ int 
            {
              Bound RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SymbolValue a = (SymbolValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SymbolValue b = (SymbolValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						String id = a.toString() +">=" + b.toString();
						System.out.println(id);
						Predicate<Double> tester = (Predicate<Double>) (Double d) -> {return d >= Double.valueOf(b.lexeme);};
						Bound bound = new Bound(id, tester);
						RESULT = bound;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // exp ::= variable GT int 
            {
              Bound RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SymbolValue a = (SymbolValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SymbolValue b = (SymbolValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						String id = a.toString() +">" + b.toString();
						System.out.println(id);
						Predicate<Double> tester = (Predicate<Double>) (Double d) -> {return d > Double.valueOf(b.lexeme);};
						Bound bound = new Bound(id, tester);
						RESULT = bound;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // exp ::= variable LTEQ int 
            {
              Bound RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SymbolValue a = (SymbolValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SymbolValue b = (SymbolValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						String id = a.toString()+"<=" + b.toString();
						System.out.println(id);
						Predicate<Double> tester = (Predicate<Double>) (Double d) -> {return d <= Double.valueOf(b.lexeme);};
						Bound bound = new Bound(id, tester);
						RESULT = bound;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // exp ::= variable LT int 
            {
              Bound RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SymbolValue a = (SymbolValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SymbolValue b = (SymbolValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
							String id = a.toString()+ "<" + b.toString();
							System.out.println(id);
							Predicate<Double> tester = (Predicate<Double>) (Double d) -> {return d < Double.valueOf(b.lexeme);};
							Bound bound = new Bound(id, tester);
							RESULT = bound;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stmt ::= exp 
            {
              Bound RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bound e = (Bound)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						//System.out.println("exp "+ e.toString());
						RESULT = e;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stmts ::= stmt 
            {
              BoundList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bound s = (Bound)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						BoundList blist = new BoundList();
						blist.tester_list.add(s.tester);
						blist.id_map.put(s.id, s.tester);
						RESULT = blist;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmts",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stmts ::= stmts COMMA stmt 
            {
              BoundList RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		BoundList ss = (BoundList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bound s = (Bound)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						ss.tester_list.add((Predicate) s.tester);
						ss.id_map.put(s.id, s.tester);
						RESULT = ss;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmts",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // var ::= variable COMMA rawtype COMMA delta_stmt COMMA stmts 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		SymbolValue v = (SymbolValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		SymbolValue t = (SymbolValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SymbolValue d = (SymbolValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BoundList s = (BoundList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				System.out.println("Handling rawtype "+t.lexeme);
				RawType rt = RawType.valueOf(t.lexeme);
				Global.types.put(v.lexeme, rt);
				System.out.println("delta_stmt "+ d.toString());
				Double dbl = Double.valueOf(d.lexeme);
				Global.deltas.put(v.lexeme, dbl);
				Global.bounds.put(v.lexeme, s.tester_list);
				Global.bound_ids.put(v.lexeme, s.id_map);
				RESULT = v.lexeme;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // var ::= variable COMMA rawtype COMMA threshold_stmt COMMA delta_stmt 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		SymbolValue v = (SymbolValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		SymbolValue t = (SymbolValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int thleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int thright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SymbolValue th = (SymbolValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SymbolValue d = (SymbolValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				System.out.println("Handling rawtype "+t.lexeme);
				RawType rt = RawType.valueOf(t.lexeme);
				Global.types.put(v.lexeme, rt);
				System.out.println("delta_stmt "+ d.toString());
				Double th_dbl = Double.valueOf(th.lexeme);
				Global.thresholds.put(v.lexeme, th_dbl);
				Double delta_dbl = Double.valueOf(d.lexeme);
				Global.deltas.put(v.lexeme, delta_dbl);
				RESULT = v.lexeme;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // var ::= variable COMMA rawtype COMMA delta_stmt 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		SymbolValue v = (SymbolValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SymbolValue t = (SymbolValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SymbolValue d = (SymbolValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				System.out.println("Handling rawtype "+t.lexeme);
				RawType rt = RawType.valueOf(t.lexeme);
				Global.types.put(v.lexeme, rt);
				System.out.println("delta_stmt "+ d.toString());
				Double dbl = Double.valueOf(d.lexeme);
				Global.deltas.put(v.lexeme, dbl);
				RESULT = v.lexeme;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // var ::= variable COMMA rawtype COMMA threshold_stmt 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		SymbolValue v = (SymbolValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SymbolValue t = (SymbolValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int thleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int thright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SymbolValue th = (SymbolValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				System.out.println("Handling rawtype "+t.lexeme);
				RawType rt = RawType.valueOf(t.lexeme);
				Global.types.put(v.lexeme, rt);
				System.out.println("threshold_stmt "+ th.toString());
				Double dbl = Double.valueOf(th.lexeme);
				Global.thresholds.put(v.lexeme, dbl);
				RESULT = v.lexeme;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // var ::= variable COMMA rawtype COMMA stmts 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		SymbolValue v = (SymbolValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SymbolValue t = (SymbolValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BoundList s = (BoundList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				System.out.println("Handling rawtype "+t.lexeme);
				RawType rt = RawType.valueOf(t.lexeme);
				Global.types.put(v.lexeme, rt);
				Global.bounds.put(v.lexeme, s.tester_list);
				Global.bound_ids.put(v.lexeme, s.id_map);
				RESULT = v.lexeme;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // var ::= variable COMMA rawtype 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SymbolValue v = (SymbolValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SymbolValue t = (SymbolValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				System.out.println("Handling rawtype "+t.lexeme);
				RawType rt = RawType.valueOf(t.lexeme);
				//System.out.println("rt == null? "+(rt==null));
				Global.types.put(v.lexeme, rt);
				RESULT = v.lexeme;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // vars ::= 
            {
              ArrayList<String> RESULT =null;
		 RESULT = new ArrayList<String>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vars",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // vars ::= vars var 
            {
              ArrayList<String> RESULT =null;
		int vsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> vs = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 vs.add(v); RESULT = vs; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vars",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= GIVENS vars EVENTS vars 
            {
              Object RESULT =null;
		int gvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int gvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<String> gv = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int evleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int evright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<String> ev = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			/* System.out.print("Given vars: ");
			System.out.println(gv);
			System.out.print("Event vars: ");
			System.out.println(ev); */
			Global.givens = gv;
			Global.events = ev;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

