
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Aug 07 17:30:08 EDT 2019
//----------------------------------------------------

package mjparser;

import java_cup.runtime.*;
import java.io.FileInputStream;
import java.util.function.Predicate;
import java.util.*;
import java.io.PrintWriter;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Arrays;
import inference_engine.RawType;
import inference_engine.Global;
import inference_engine.ConstraintEvent;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Aug 07 17:30:08 EDT 2019
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\042\000\002\002\004\000\002\002\006\000\002\002" +
    "\010\000\002\004\004\000\002\004\002\000\002\005\007" +
    "\000\002\003\004\000\002\003\002\000\002\006\005\000" +
    "\002\006\007\000\002\006\007\000\002\006\007\000\002" +
    "\006\011\000\002\006\011\000\002\006\003\000\002\007" +
    "\005\000\002\007\003\000\002\010\003\000\002\010\005" +
    "\000\002\011\005\000\002\011\005\000\002\011\005\000" +
    "\002\011\005\000\002\011\005\000\002\011\005\000\002" +
    "\011\005\000\002\011\005\000\002\011\005\000\002\017" +
    "\003\000\002\017\002\000\002\012\005\000\002\013\005" +
    "\000\002\014\003\000\002\015\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\074\000\004\004\005\001\002\000\004\002\076\001" +
    "\002\000\010\005\ufffa\014\ufffa\034\ufffa\001\002\000\010" +
    "\005\007\014\013\034\012\001\002\000\012\002\ufffa\006" +
    "\ufffa\014\ufffa\034\ufffa\001\002\000\014\002\ufffb\005\ufffb" +
    "\006\ufffb\014\ufffb\034\ufffb\001\002\000\004\033\014\001" +
    "\002\000\014\002\ufff3\005\ufff3\006\ufff3\014\ufff3\034\ufff3" +
    "\001\002\000\020\022\uffe0\023\uffe0\024\uffe0\025\uffe0\026" +
    "\uffe0\027\uffe0\033\uffe0\001\002\000\004\007\015\001\002" +
    "\000\016\002\ufff9\005\ufff9\006\ufff9\014\ufff9\033\016\034" +
    "\ufff9\001\002\000\010\014\013\016\025\017\023\001\002" +
    "\000\016\002\ufff8\005\ufff8\006\ufff8\014\ufff8\033\031\034" +
    "\ufff8\001\002\000\016\002\ufff1\005\ufff1\006\ufff1\014\ufff1" +
    "\033\ufff1\034\ufff1\001\002\000\026\002\ufff0\005\ufff0\006" +
    "\ufff0\011\ufff0\012\ufff0\014\ufff0\030\062\031\061\033\ufff0" +
    "\034\ufff0\001\002\000\016\022\043\023\046\024\042\025" +
    "\047\026\045\027\044\001\002\000\004\020\040\001\002" +
    "\000\016\002\ufff7\005\ufff7\006\ufff7\014\ufff7\033\036\034" +
    "\ufff7\001\002\000\004\020\033\001\002\000\016\002\ufff6" +
    "\005\ufff6\006\ufff6\014\ufff6\033\027\034\ufff6\001\002\000" +
    "\004\014\013\001\002\000\016\002\ufff4\005\ufff4\006\ufff4" +
    "\014\ufff4\033\031\034\ufff4\001\002\000\004\014\013\001" +
    "\002\000\016\002\ufff2\005\ufff2\006\ufff2\014\ufff2\033\ufff2" +
    "\034\ufff2\001\002\000\004\021\035\001\002\000\016\002" +
    "\uffe3\005\uffe3\006\uffe3\014\uffe3\033\uffe3\034\uffe3\001\002" +
    "\000\026\002\uffe1\005\uffe1\006\uffe1\011\uffe1\012\uffe1\014" +
    "\uffe1\030\uffe1\031\uffe1\033\uffe1\034\uffe1\001\002\000\004" +
    "\017\023\001\002\000\014\002\ufff5\005\ufff5\006\ufff5\014" +
    "\ufff5\034\ufff5\001\002\000\004\021\035\001\002\000\016" +
    "\002\uffe2\005\uffe2\006\uffe2\014\uffe2\033\uffe2\034\uffe2\001" +
    "\002\000\004\021\035\001\002\000\032\002\uffe4\005\uffe4" +
    "\006\uffe4\011\uffe4\012\uffe4\013\051\014\uffe4\021\057\030" +
    "\uffe4\031\uffe4\033\uffe4\034\uffe4\001\002\000\004\021\035" +
    "\001\002\000\004\021\035\001\002\000\032\002\uffe4\005" +
    "\uffe4\006\uffe4\011\uffe4\012\uffe4\013\051\014\uffe4\021\053" +
    "\030\uffe4\031\uffe4\033\uffe4\034\uffe4\001\002\000\004\021" +
    "\035\001\002\000\026\002\uffed\005\uffed\006\uffed\011\uffed" +
    "\012\uffed\014\uffed\030\uffed\031\uffed\033\uffed\034\uffed\001" +
    "\002\000\026\002\uffe5\005\uffe5\006\uffe5\011\uffe5\012\uffe5" +
    "\014\uffe5\030\uffe5\031\uffe5\033\uffe5\034\uffe5\001\002\000" +
    "\026\002\uffe7\005\uffe7\006\uffe7\011\uffe7\012\uffe7\014\uffe7" +
    "\030\uffe7\031\uffe7\033\uffe7\034\uffe7\001\002\000\026\002" +
    "\uffe8\005\uffe8\006\uffe8\011\uffe8\012\uffe8\014\uffe8\030\uffe8" +
    "\031\uffe8\033\uffe8\034\uffe8\001\002\000\026\002\uffec\005" +
    "\uffec\006\uffec\011\uffec\012\uffec\014\uffec\030\uffec\031\uffec" +
    "\033\uffec\034\uffec\001\002\000\026\002\uffeb\005\uffeb\006" +
    "\uffeb\011\uffeb\012\uffeb\014\uffeb\030\uffeb\031\uffeb\033\uffeb" +
    "\034\uffeb\001\002\000\026\002\uffe9\005\uffe9\006\uffe9\011" +
    "\uffe9\012\uffe9\014\uffe9\030\uffe9\031\uffe9\033\uffe9\034\uffe9" +
    "\001\002\000\026\002\uffea\005\uffea\006\uffea\011\uffea\012" +
    "\uffea\014\uffea\030\uffea\031\uffea\033\uffea\034\uffea\001\002" +
    "\000\026\002\uffee\005\uffee\006\uffee\011\uffee\012\uffee\014" +
    "\uffee\030\uffee\031\uffee\033\uffee\034\uffee\001\002\000\004" +
    "\014\013\001\002\000\004\014\013\001\002\000\026\002" +
    "\uffe6\005\uffe6\006\uffe6\011\uffe6\012\uffe6\014\uffe6\030\uffe6" +
    "\031\uffe6\033\uffe6\034\uffe6\001\002\000\022\002\uffef\005" +
    "\uffef\006\uffef\011\uffef\012\uffef\014\uffef\033\uffef\034\uffef" +
    "\001\002\000\012\002\000\006\066\014\013\034\012\001" +
    "\002\000\006\002\ufffd\010\ufffd\001\002\000\006\002\uffff" +
    "\010\070\001\002\000\004\014\013\001\002\000\006\002" +
    "\ufffe\010\ufffe\001\002\000\004\011\073\001\002\000\004" +
    "\014\013\001\002\000\004\012\075\001\002\000\006\002" +
    "\ufffc\010\ufffc\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\074\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\003\005\001\001\000\006\006\007\015\010\001\001" +
    "\000\004\003\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\007\016\010\017\011\020\012" +
    "\023\013\025\015\021\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\007\027\010\017\011\020\015\021\001\001\000" +
    "\002\001\001\000\010\010\031\011\020\015\021\001\001" +
    "\000\002\001\001\000\004\014\033\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\036\001\001\000\002" +
    "\001\001\000\004\014\040\001\001\000\002\001\001\000" +
    "\004\014\057\001\001\000\004\017\055\001\001\000\004" +
    "\014\054\001\001\000\004\014\053\001\001\000\004\017" +
    "\051\001\001\000\004\014\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\010\063\011\020\015" +
    "\021\001\001\000\006\011\062\015\021\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\006\007\015\010\001" +
    "\001\000\004\004\066\001\001\000\004\005\070\001\001" +
    "\000\010\010\071\011\020\015\021\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\010\073\011\020\015\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static void main(String args[]) throws Exception {
        new parser(new Yylex(new FileInputStream(args[0]))).parse();
    }
				
				public PrintWriter out; 
    
				public String programName;

				public void unrecovered_syntax_error(Symbol cur_SymbolValue) {
								//System.out.println("cur_SymbolValue: "+ cur_SymbolValue.value);
								report_fatal_error("Fatal syntax error", cur_SymbolValue);
				}
					
				public void report_fatal_error(String message, Object info) {
								report_error(message, info);
								done_parsing();
								Symbol sym = (Symbol)info;
								mjparser.SymbolValue tok = (mjparser.SymbolValue)sym.value;
								throw new mjparser.ParseException("Fatal parsing error", tok.line, tok.pos);
				}
					
				public void report_error(String message, Object info) {
								Symbol sym = (Symbol)info;
								mjparser.SymbolValue tok = (mjparser.SymbolValue)sym.value;
								System.out.println("sym null? "+(sym == null));
								System.out.println("sym.sym: "+sym.sym);
								System.err.println("tok null? "+ (tok == null));
								System.err.println("tok.lexeme: "+ tok.lexeme);
								System.err.println("[" + tok.line + "," + tok.pos + "] "); 
								System.err.println( message + " at " + tok.toString() );
				}
					

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // variable ::= VARIABLE 
            {
              SymbolValue RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SymbolValue v = (SymbolValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*System.out.println("variable:"+v.lexeme);*/ RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // int ::= NUMBER 
            {
              SymbolValue RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SymbolValue n = (SymbolValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*System.out.println("int "+n.lexeme);*/ RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("int",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // delta_stmt ::= DELTA DEF int 
            {
              SymbolValue RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SymbolValue i = (SymbolValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("delta_stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // threshold_stmt ::= THRESHOLD DEF int 
            {
              SymbolValue RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SymbolValue i = (SymbolValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("threshold_stmt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // string_literal ::= 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("string_literal",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // string_literal ::= STRING 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SymbolValue s = (SymbolValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s.lexeme; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("string_literal",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // exp ::= exp LOGICAL_AND exp 
            {
              Bound RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Bound e1 = (Bound)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int laleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int laright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SymbolValue la = (SymbolValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bound e2 = (Bound)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						String id = e1.id + la.lexeme + e2.id;
						//System.out.println(id);
						Predicate<Object> tester = (Predicate<Object>) (Object o) -> {return e1.tester.test(o) && e2.tester.test(o);};
						// add in var_names and testers hashmap here
						HashMap<String, Predicate<Object>> testers = new HashMap<String, Predicate<Object>>();
						if(!e1.testers.keySet().isEmpty()){
								testers = e1.testers;
								if(!e2.testers.keySet().isEmpty()){
										testers.putAll(e2.testers);
								}
						} else if(!e2.testers.keySet().isEmpty()){
								testers = e2.testers;
						} else {
								testers.put(e1.var_name, e1.tester);
								testers.put(e2.var_name, e2.tester);
						}
						String[] var_names = {e1.var_name, e2.var_name};
						Bound bound = null;
						if(e1.var_name.equals(e2.var_name)){
								bound = new Bound(e1.var_name, id, tester);
						} else {
								//System.out.println("Logical and testers: "+testers.keySet());
								bound = new Bound(id, testers, var_names);
						}
						//set up complement(s)
						if(e1.var_name.equals(e2.var_name)){
								bound.tester_complement = (Predicate<Object>) (Object o) -> {return e1.tester_complement.test(o) && e2.tester_complement.test(o);};
						} else	if(!e1.tester_complements.keySet().isEmpty()){
								if(!e2.tester_complements.keySet().isEmpty()){
										Set<String> keys = e1.tester_complements.keySet();
										for(String key : keys){
												if(e1.tester_complements.keySet().contains(key)){
														//combine if necessary
														Predicate<Object> temp = (Predicate<Object>) (Object o) -> {return e1.tester_complements.get(key).test(o) && e2.tester_complements.get(key).test(o);};
														e2.tester_complements.put(key, temp);
												}
										} 
								} else {
												bound.tester_complements = e1.tester_complements;
								}
						} else	if(!e2.tester_complements.keySet().isEmpty()){
								e2.tester_complements.put(e1.var_name, e1.tester_complement);
								bound.tester_complements = e2.tester_complements;
						}
						RESULT = bound;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // exp ::= variable NOTEQ string_literal 
            {
              Bound RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SymbolValue a = (SymbolValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						String id = a.toString() + op.lexeme + v;
						//System.out.println(id);
						//Predicate<String> tester = (Predicate<String>) (String s) -> {return s.equals(v);};
						Predicate<Object> tester = (Predicate<Object>) (Object o) -> {String s = o.toString(); return !s.equals(v);};
						Bound bound = new Bound(a.lexeme, id, tester);
						bound.tester_complement = (Predicate<Object>) (Object o) -> {String s = o.toString(); return s.equals(v);};
						RESULT = bound;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // exp ::= variable NOTEQ NUMBER 
            {
              Bound RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SymbolValue a = (SymbolValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SymbolValue n = (SymbolValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						String id = a.toString() + op.lexeme + n.lexeme;
						//System.out.println(id);
						Predicate<Object> tester = (Predicate<Object>) (Object o) -> {Double d = Double.valueOf(o.toString()); return Math.abs(d-Double.valueOf(n.lexeme))>1;};
						Bound bound = new Bound(a.lexeme, id, tester);
						bound.tester_complement = (Predicate<Object>) (Object o) -> {Double d = Double.valueOf(o.toString()); return !(Math.abs(d-Double.valueOf(n.lexeme))>1);};
						RESULT = bound;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // exp ::= variable EQ string_literal 
            {
              Bound RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SymbolValue a = (SymbolValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						String id = a.toString() + op.lexeme + v;
						//System.out.println(id);
						Predicate<Object> tester = (Predicate<Object>) (Object o) -> {String s = o.toString(); return s.equals(v);};
						Bound bound = new Bound(a.lexeme, id, tester);
						bound.tester_complement = (Predicate<Object>) (Object o) -> {String s = o.toString(); return !s.equals(v);};
						RESULT = bound;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // exp ::= variable EQ NUMBER 
            {
              Bound RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SymbolValue a = (SymbolValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SymbolValue n = (SymbolValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						String id = a.toString() + op.lexeme + n.lexeme;
						//System.out.println(id);
						Predicate<Object> tester = (Predicate<Object>) (Object o) -> {Double d = Double.valueOf(o.toString()); return Math.abs(d-Double.valueOf(n.lexeme))<1;};
						Bound bound = new Bound(a.lexeme, id, tester);
						bound.tester_complement = (Predicate<Object>) (Object o) -> {Double d = Double.valueOf(o.toString()); return !(Math.abs(d-Double.valueOf(n.lexeme))<1);};
						RESULT = bound;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // exp ::= variable GTEQ int 
            {
              Bound RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SymbolValue a = (SymbolValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SymbolValue b = (SymbolValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						String id = a.toString() +">=" + b.toString();
						//System.out.println(id);
						Predicate<Object> tester = (Predicate<Object>) (Object o) -> {Double d = Double.valueOf(o.toString()); return d >= Double.valueOf(b.lexeme);};
						Bound bound = new Bound(a.lexeme, id, tester);
						bound.tester_complement = (Predicate<Object>) (Object o) -> {Double d = Double.valueOf(o.toString()); return d < Double.valueOf(b.lexeme);};
						RESULT = bound;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // exp ::= variable GT int 
            {
              Bound RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SymbolValue a = (SymbolValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SymbolValue b = (SymbolValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						String id = a.toString() +">" + b.toString();
						//System.out.println(id);
						Predicate<Object> tester = (Predicate<Object>) (Object o) -> {Double d = Double.valueOf(o.toString()); return d > Double.valueOf(b.lexeme);};
						Bound bound = new Bound(a.lexeme, id, tester);
						bound.tester_complement = (Predicate<Object>) (Object o) -> {Double d = Double.valueOf(o.toString()); return d <= Double.valueOf(b.lexeme);};
						RESULT = bound;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // exp ::= variable LTEQ int 
            {
              Bound RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SymbolValue a = (SymbolValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SymbolValue b = (SymbolValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						String id = a.toString()+"<=" + b.toString();
						//System.out.println(id);
						Predicate<Object> tester = (Predicate<Object>) (Object o) -> {Double d = Double.valueOf(o.toString()); return d <= Double.valueOf(b.lexeme);};
						Bound bound = new Bound(a.lexeme, id, tester);
						bound.tester_complement = (Predicate<Object>) (Object o) -> {Double d = Double.valueOf(o.toString()); return d > Double.valueOf(b.lexeme);};
						RESULT = bound;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // exp ::= variable LT int 
            {
              Bound RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SymbolValue a = (SymbolValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SymbolValue b = (SymbolValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
							String id = a.toString()+ "<" + b.toString();
							//System.out.println(id);
							Predicate<Object> tester = (Predicate<Object>) (Object o) -> {Double d = Double.valueOf(o.toString()); return d < Double.valueOf(b.lexeme);};
							Bound bound = new Bound(a.lexeme, id, tester);
							bound.tester_complement = (Predicate<Object>) (Object o) -> {Double d = Double.valueOf(o.toString()); return d >= Double.valueOf(b.lexeme);};
							RESULT = bound;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // stmt ::= exp LOGICAL_OR stmt 
            {
              Bound RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Bound e = (Bound)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int loleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int loright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SymbolValue lo = (SymbolValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bound s = (Bound)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						String id = e.id + lo.lexeme + s.id;
						//System.out.println(id);
						Predicate<Object> tester = (Predicate<Object>) (Object d) -> {return e.tester.test(d) || s.tester.test(d);};
						//TODO: figure out how to get var names together into or'd Bound object
						String s_id = s.id;
						String[] var_names = s.var_names;
						if(var_names == null){
								var_names = new String[]{e.var_name, s.var_name};
						} else {
								var_names = s.var_names;
								ArrayList<String> temp = new ArrayList<String>(Arrays.asList(s.var_names));
								temp.add(e.var_name);
								var_names = temp.toArray(var_names);
								//System.out.println("var_names: "+Arrays.toString(var_names));
						}
						// add in var_names and testers hashmap here
						HashMap<String, Predicate<Object>> testers = new HashMap<String, Predicate<Object>>();
						if(!e.testers.keySet().isEmpty()){ // != null){
								testers = e.testers;
								if(!s.testers.keySet().isEmpty()){ // != null){
										testers.putAll(s.testers);
								}
						} else if(!s.testers.keySet().isEmpty()){ // !=null){
								testers = s.testers;
						} else {
								testers.put(e.var_name, e.tester);
								testers.put(s.var_name, s.tester);
						}
						Bound bound = null;
						if(e.var_name.equals(s.var_name)){
								bound = new Bound(e.var_name, id, tester);
						} else {
								bound = new Bound(id, testers, var_names);
						}
						//System.out.println("Bound testers"+testers.keySet());
						RESULT = bound;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stmt ::= exp 
            {
              Bound RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bound e = (Bound)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						//System.out.println("exp "+ e.toString());
						RESULT = e;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stmts ::= stmt 
            {
              BoundList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bound s = (Bound)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						BoundList blist = new BoundList();
						blist.tester_list.add(s.tester);
						blist.id_map.put(s.id, s.tester);
						RESULT = blist;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmts",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stmts ::= stmts COMMA stmt 
            {
              BoundList RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		BoundList ss = (BoundList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bound s = (Bound)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						ss.tester_list.add((Predicate) s.tester);
						ss.id_map.put(s.id, s.tester);
						RESULT = ss;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmts",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // var ::= COMMENT 
            {
              SymbolValue RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SymbolValue c = (SymbolValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = c;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // var ::= variable COMMA RAWTYPE COMMA delta_stmt COMMA stmts 
            {
              SymbolValue RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		SymbolValue v = (SymbolValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		SymbolValue t = (SymbolValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SymbolValue d = (SymbolValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BoundList s = (BoundList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				Global.types.put(v.lexeme, RawType.valueOf(t.lexeme));
				Global.deltas.put(v.lexeme, Double.valueOf(d.lexeme));
				Global.bounds.put(v.lexeme, s.tester_list);
				Global.bound_ids.put(v.lexeme, s.id_map);
				RESULT = v;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // var ::= variable COMMA RAWTYPE COMMA threshold_stmt COMMA delta_stmt 
            {
              SymbolValue RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		SymbolValue v = (SymbolValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		SymbolValue t = (SymbolValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int thleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int thright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SymbolValue th = (SymbolValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SymbolValue d = (SymbolValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				Global.types.put(v.lexeme, RawType.valueOf(t.lexeme));
				Global.thresholds.put(v.lexeme, Double.valueOf(th.lexeme));
				Global.deltas.put(v.lexeme, Double.valueOf(d.lexeme));
				RESULT = v;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // var ::= variable COMMA RAWTYPE COMMA delta_stmt 
            {
              SymbolValue RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		SymbolValue v = (SymbolValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SymbolValue t = (SymbolValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SymbolValue d = (SymbolValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				//System.out.println("Handling rawtype "+t.lexeme);
				Global.types.put(v.lexeme, RawType.valueOf(t.lexeme));
				//System.out.println("delta_stmt "+ d.toString());
				Global.deltas.put(v.lexeme, Double.valueOf(d.lexeme));
				RESULT = v;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // var ::= variable COMMA RAWTYPE COMMA threshold_stmt 
            {
              SymbolValue RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		SymbolValue v = (SymbolValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SymbolValue t = (SymbolValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int thleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int thright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SymbolValue th = (SymbolValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				Global.types.put(v.lexeme, RawType.valueOf(t.lexeme));
				Global.thresholds.put(v.lexeme, Double.valueOf(th.lexeme));
				RESULT = v;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // var ::= variable COMMA RAWTYPE COMMA stmts 
            {
              SymbolValue RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		SymbolValue v = (SymbolValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SymbolValue t = (SymbolValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BoundList s = (BoundList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				Global.types.put(v.lexeme, RawType.valueOf(t.lexeme));
				Global.bounds.put(v.lexeme, s.tester_list);
				Global.bound_ids.put(v.lexeme, s.id_map);
				RESULT = v;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // var ::= variable COMMA RAWTYPE 
            {
              SymbolValue RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SymbolValue v = (SymbolValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SymbolValue t = (SymbolValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				//System.out.println("Handling rawtype "+t.lexeme);
				Global.types.put(v.lexeme, RawType.valueOf(t.lexeme));
				RESULT = v;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // vars ::= 
            {
              ArrayList<String> RESULT =null;
		 RESULT = new ArrayList<String>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vars",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // vars ::= vars var 
            {
              ArrayList<String> RESULT =null;
		int vsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> vs = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SymbolValue v = (SymbolValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				//System.out.println("lexeme="+v.lexeme+", value="+v.value+", sym==COMMENT? "+(v.value == sym.COMMENT));
				//System.out.println();
				if(v.value != sym.COMMENT){
						vs.add(v.lexeme);
				}
				RESULT = vs;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vars",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // constraint ::= P_LPAREN stmt GIVEN stmt RPAREN 
            {
              ConstraintEvent RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Bound s1 = (Bound)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Bound s2 = (Bound)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					String var_name = String.format("P(%s|%s)", s1.id, s2.id);
					String id = var_name; //TODO: change later
					double p_A = 1.0;
					/*System.out.println(s1.toString()+ " "+s2.toString());
					System.out.println("s1.testers.keySet() "+s1.testers.keySet());
					System.out.println("s2.testers.keySet() "+s2.testers.keySet());*/
					HashMap<String,Predicate<Object>> event_testers = s1.testers;
					HashMap<String,Predicate<Object>> given_testers = s2.testers;
					ConstraintEvent<Object> ce = new ConstraintEvent<Object>(var_name, id, p_A, event_testers, given_testers);
					/*System.out.println("ConstraintEvent:"+ce.toString());
					System.out.println(event_testers.keySet());
					System.out.println(given_testers.keySet());*/
					RESULT = ce;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constraint",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // constraints ::= 
            {
              ArrayList<ConstraintEvent> RESULT =null;
		
				RESULT = new ArrayList<ConstraintEvent>();
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constraints",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // constraints ::= constraints constraint 
            {
              ArrayList<ConstraintEvent> RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<ConstraintEvent> cs = (ArrayList<ConstraintEvent>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ConstraintEvent c = (ConstraintEvent)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					cs.add(c);
					RESULT = cs;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constraints",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= GIVENS vars EVENTS vars CONSTRAINTS constraints 
            {
              Object RESULT =null;
		int gvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int gvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<String> gv = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int evleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int evright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<String> ev = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ConstraintEvent> c = (ArrayList<ConstraintEvent>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			/* System.out.print("Given vars: ");
			System.out.println(gv);
			System.out.print("Event vars: ");
			System.out.println(ev); */
			Global.givens = gv;
			Global.events = ev;
			Global.constraint_events = c;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= GIVENS vars EVENTS vars 
            {
              Object RESULT =null;
		int gvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int gvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<String> gv = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int evleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int evright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<String> ev = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			Global.givens = gv;
			Global.events = ev;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

